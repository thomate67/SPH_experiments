#version 460

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

layout(std430, binding = 0) buffer positions
{
    vec2 position[];
};

layout(std430, binding = 1) buffer velocities
{
    vec2 velocity[];
};

layout(std430, binding = 2) buffer forces
{
    vec2 force[];
};

layout(std430, binding = 3) buffer densities
{
    float density[];
};

layout(std430, binding = 4) buffer pressures
{
    float pressure[];
};

// constants
#define TIME_STEP 0.0001f

uniform float boundWidth;
uniform float boundHeight;
uniform float WALL_DAMPING;

void main()
{
    uint i = gl_GlobalInvocationID.x;

    // integrate
    vec2 acceleration = force[i] / density[i];
    vec2 new_velocity = velocity[i] + TIME_STEP * acceleration;
    vec2 new_position = position[i] + TIME_STEP * new_velocity;

    // boundary conditions
    if (new_position.x < -boundWidth)
    {
        new_position.x = -boundWidth;
        new_velocity.x *= -1 * WALL_DAMPING;
    }
    else if (new_position.x > boundWidth)
    {
        new_position.x = boundWidth;
        new_velocity.x *= -1 * WALL_DAMPING;
    }
    else if (new_position.y < -boundHeight)
    {
        new_position.y = -boundHeight;
        new_velocity.y *= -1 * WALL_DAMPING;
    }
    else if (new_position.y > boundHeight)
    {
        new_position.y = boundHeight;
        new_velocity.y *= -1 * WALL_DAMPING;
    }

    velocity[i] = new_velocity;
    position[i] = new_position;
}