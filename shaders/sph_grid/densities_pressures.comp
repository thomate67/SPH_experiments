#version 460

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

struct Uniform_grid_params
{
    vec4 grid_min;
    ivec4 cell_count;
    vec4 cell_size;
    vec4 grid_pos;
    int total_cell_count;
    int cell_capacity;
    int grid_capacity;
};

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 force;
    float density;
    float pressure;
    float pad0;
    float pad1;
};

layout(std430, binding = 0) buffer particles
{
    Particle sph_particle[];
};

layout(std430, binding = 1) buffer grid_parameters
{
    Uniform_grid_params grid_params;
};

layout (std430, binding = 2) buffer grid_buffer
{
    int grid[];
};

layout (std430, binding = 3) buffer cell_counter_buffer
{
    int cell_counter[];
};

layout (std430, binding = 4) buffer neighbour_buffer
{
    int neighbour[];
};

layout (std430, binding = 5) buffer neighbour_counter_buffer
{
    int neighbour_counter[];
};

// constants
#define PI_FLOAT 3.1415927410125732421875f

// uniform variables
uniform float RESTING_DENSITY;
uniform float PARTICLE_MASS;
uniform float PARTICLE_STIFFNESS;
uniform float SMOOTHING_LENGTH;
uniform int NEIGHBOUR_AMOUNT;

void main()
{
    uint id = gl_GlobalInvocationID.x;

    if (id >= sph_particle.length())
    {
        return;
    }
    
    // compute density
    float density_sum = 0.f;
    for (int i = 0; i < neighbour_counter[id]; i++)
    {
        int j = neighbour[id * NEIGHBOUR_AMOUNT + i];
        vec3 delta = vec3(sph_particle[id].position - sph_particle[j].position);
        float r = length(delta);
        if (r < SMOOTHING_LENGTH)
        {
            float poly6Kernel = 315.f * pow(SMOOTHING_LENGTH * SMOOTHING_LENGTH - r * r, 3) / (64.f * PI_FLOAT * pow(SMOOTHING_LENGTH, 9));
            density_sum += PARTICLE_MASS * poly6Kernel;
        }
    }
    sph_particle[id].density = density_sum;
    // compute pressure
    sph_particle[id].pressure = max(PARTICLE_STIFFNESS * (density_sum - RESTING_DENSITY), 0.f);
}