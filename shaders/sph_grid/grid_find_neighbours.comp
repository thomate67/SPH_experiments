#version 460

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

struct Uniform_grid_params
{
    vec4 grid_min;
    ivec4 cell_count;
    vec4 cell_size;
    vec4 grid_pos;
    int total_cell_count;
    int cell_capacity;
    int grid_capacity;
};

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 force;
    float density;
    float pressure;
    float pad0;
    float pad1;
};

layout(std430, binding = 0) buffer particles
{
    Particle sph_particle[];
};

layout(std430, binding = 1) buffer grid_parameters
{
    Uniform_grid_params grid_params;
};

layout (std430, binding = 2) buffer grid_buffer
{
    int grid[];
};

layout (std430, binding = 3) buffer cell_counter_buffer
{
    int cell_counter[];
};

layout (std430, binding = 4) buffer neighbour_buffer
{
    int neighbour[];
};

layout (std430, binding = 5) buffer neighbour_counter_buffer
{
    int neighbour_counter[];
};

//uniform variables
uniform int NEIGHBOUR_AMOUNT;
uniform float SMOOTHING_LENGTH;


void main() 
{
    uint id = gl_GlobalInvocationID.x;

    if (id >= sph_particle.length())
    {
        return;
    }

    Particle p = sph_particle[id];
    int neighbour_count = 0;

    int i = int((p.position.x - grid_params.grid_min.x) / grid_params.cell_size.x);
    int j = int((p.position.y - grid_params.grid_min.y) / grid_params.cell_size.y);
    int k = int((p.position.z - grid_params.grid_min.z) / grid_params.cell_size.z);

    int max_x = min(i + 2, grid_params.cell_count.x);
    int max_y = min(j + 2, grid_params.cell_count.y);
    int max_z = min(k + 2, grid_params.cell_count.z);

    for (int x = max(0, i - 1); x < max_x; x++) 
    {
        int x_counter_offset = x * grid_params.cell_count.y * grid_params.cell_count.z;
        int x_offset = x_counter_offset * grid_params.cell_capacity;
        for (int y = max(0, j - 1); y < max_y; y++)
        {
            int y_counter_offset = y * grid_params.cell_count.z;
            int y_offset = y_counter_offset * grid_params.cell_capacity;

            for (int z = max(0, k - 1); z < max_z; z++) 
            {
                int z_offset = z * grid_params.cell_capacity;
                int n = min(grid_params.cell_capacity, cell_counter[x_counter_offset + y_counter_offset + z]);

                for (int o = 0; o < n; o++) 
                {
                    if (neighbour_count < NEIGHBOUR_AMOUNT)
                    {
                        int other = grid[x_offset + y_offset + z_offset + o];

                        if (id == other)
                        {
                            continue;
                        }

                        vec4 pij = vec4((p.position - sph_particle[other].position).xyz, 0);
                        if (dot(pij, pij) < SMOOTHING_LENGTH * SMOOTHING_LENGTH) 
                        {
                            neighbour[id * NEIGHBOUR_AMOUNT + neighbour_count] = other;
                            neighbour_count++;
                        }
                    }
                }
            }
        }
    }
    neighbour_counter[id] = neighbour_count;
}