#version 460

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

struct Uniform_grid_params
{
    vec4 grid_min;
    ivec4 cell_count;
    vec4 cell_size;
    vec4 grid_pos;
    int total_cell_count;
    int cell_capacity;
    int grid_capacity;
};

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 force;
    float density;
    float pressure;
    float pad0;
    float pad1;
};

layout(std430, binding = 0) buffer particles
{
    Particle sph_particle[];
};

layout(std430, binding = 1) buffer grid_parameters
{
    Uniform_grid_params grid_params;
};

layout (std430, binding = 2) buffer grid_buffer
{
    int grid[];
};

layout (std430, binding = 3) buffer cell_counter_buffer
{
    int cell_counter[];
};

layout (std430, binding = 4) buffer neighbour_buffer
{
    int neighbour[];
};

layout (std430, binding = 5) buffer neighbour_counter_buffer
{
    int neighbour_counter[];
};

// constants
#define PI_FLOAT 3.1415927410125732421875f

// OpenGL y-axis is pointing up, while Vulkan y-axis is pointing down.
// So in OpenGL this is negative, but in Vulkan this is positive.
#define GRAVITY_FORCE vec3(0, -9806.65, 0)

// uniform variables
uniform float PARTICLE_MASS;
uniform float PARTICLE_VISCOSITY;
uniform float SMOOTHING_LENGTH;
uniform int NEIGHBOUR_AMOUNT;

void main()
{
    uint id = gl_GlobalInvocationID.x;  

    if (id >= sph_particle.length())
    {
        return;
    }

    // compute all forces
    vec3 pressure_force = vec3(0, 0, 0);
    vec3 viscosity_force = vec3(0, 0, 0);
    
    for (uint i = 0; i < neighbour_counter[id]; i++)
    {
        int j = neighbour[id * NEIGHBOUR_AMOUNT + i];

        if (id == j)
        {
            continue;
        }

        vec3 delta = vec3(sph_particle[id].position - sph_particle[j].position);
        float r = length(delta);
        if (r < SMOOTHING_LENGTH)
        {
            vec3 spikyKernel = -45.f / (PI_FLOAT * pow(SMOOTHING_LENGTH, 6)) * pow(SMOOTHING_LENGTH - r, 2) * normalize(delta);
            pressure_force -= PARTICLE_MASS * (sph_particle[id].pressure + sph_particle[j].pressure) / (2.f * sph_particle[j].density) * spikyKernel;
            // gradient of spiky kernel
            
            float viscosityKernel = 45.f / (PI_FLOAT * pow(SMOOTHING_LENGTH, 6)) * (SMOOTHING_LENGTH - r);
            viscosity_force += PARTICLE_MASS * vec3(sph_particle[j].velocity - sph_particle[id].velocity) / sph_particle[j].density * viscosityKernel;
            // Laplacian of viscosity kernel
                
        }
    }

    viscosity_force *= PARTICLE_VISCOSITY;
    vec3 external_force = sph_particle[id].density * GRAVITY_FORCE;

    sph_particle[id].force.xyz = pressure_force + viscosity_force + external_force;
}